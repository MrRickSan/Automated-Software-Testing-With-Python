{
	"info": {
		"name": "Stores REST API",
		"_postman_id": "27cafba4-8f12-4036-bd2f-7bd1304c4f9e",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Register and Authenticate",
			"description": "Test whether a user can register and authenticate",
			"item": [
				{
					"name": "/register Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5f82f65-39f6-46dd-ad9c-cdd04c5d8abc",
								"type": "text/javascript",
								"exec": [
									"pm.environment.unset(\"access_token\");",
									"",
									"tests[\"Response time is less than 200ms\"] = responseTime < 200;",
									"",
									"//can be made as this too",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"User created successfully\"] = jsonData.message === 'User created successfully.';",
									"",
									"pm.test(\"User created successfully\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"User created successfully\");",
									"});",
									"",
									"tests[\"Content-Type is present in response\"] = postman.getResponseHeader('Content-Type');",
									"tests[\"Content-Type is 'application/json'\"] = postman.getResponseHeader('Content-Type') === 'application/json';"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "JWT"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"user15\",\n\t\"password\": \"abcxyz\"\n}"
						},
						"url": {
							"raw": "{{url}}/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"register"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "/auth Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "59004536-2f3e-485b-b8fe-0389fcbf8fb0",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"access_token\", jsonData.access_token);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Body contains access_token\"] = responseBody.has(\"access_token\");",
									"",
									"",
									"",
									"pm.test(\"Response time is less than 150ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(150);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "JWT"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"user15\",\n\t\"password\": \"abcxyz\"\n}"
						},
						"url": {
							"raw": "{{url}}/auth",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "User create store and item",
			"description": "",
			"item": [
				{
					"name": "/register Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5f82f65-39f6-46dd-ad9c-cdd04c5d8abc",
								"type": "text/javascript",
								"exec": [
									"pm.environment.unset(\"access_token\");",
									"",
									"tests[\"Response time is less than 200ms\"] = responseTime < 200;",
									"",
									"//can be made as this too",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"User created successfully\"] = jsonData.message === 'User created successfully.';",
									"",
									"pm.test(\"User created successfully\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"User created successfully\");",
									"});",
									"",
									"tests[\"Content-Type is present in response\"] = postman.getResponseHeader('Content-Type');",
									"tests[\"Content-Type is 'application/json'\"] = postman.getResponseHeader('Content-Type') === 'application/json';"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "JWT"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"user2\",\n\t\"password\": \"abcxyz\"\n}"
						},
						"url": {
							"raw": "{{url}}/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"register"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "/auth Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "59004536-2f3e-485b-b8fe-0389fcbf8fb0",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"access_token\", jsonData.access_token);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"tests[\"Body contains access_token\"] = responseBody.has(\"access_token\");",
									"",
									"",
									"",
									"pm.test(\"Response time is less than 150ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(150);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "JWT"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"user2\",\n\t\"password\": \"abcxyz\"\n}"
						},
						"url": {
							"raw": "{{url}}/auth",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "/store/test_store",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df3ffbf4-337d-446a-a587-efd7f7208989",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"tests[\"Store name is returned\"] = jsonData.name === 'test_store';",
									"tests[\"Store id is returned\"] = jsonData.id === 1;",
									"tests[\"Store items are an empty list\"] = jsonData.items.length === 0;",
									"",
									"tests[\"Successful POST request\"] = responseCode.code === 201;",
									"tests[\"Response time is less than 200ms\"] = responseTime < 200;",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === 'application/json';",
									"",
									"postman.setEnvironmentVariable(\"store_id\", jsonData.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "JWT {{access_token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/store/test_store",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"test_store"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "/item/test_item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f64626a3-26f9-4244-adc4-8e1a0c7554b0",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"tests[\"Item name is returned\"] = jsonData.name === 'test_item';",
									"tests[\"Item price is returned\"] = jsonData.id === 17.99;",
									"tests[\"Successful POST request\"] = responseCode.code === 201;",
									"tests[\"Response time is less than 200ms\"] = responseTime < 200;",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === 'application/json';"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "JWT {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t'price': 17.99,\n\t'store_id': {{store_id}}\n\t\n}"
						},
						"url": {
							"raw": "{{url}}/item/test_item",
							"host": [
								"{{url}}"
							],
							"path": [
								"item",
								"test_item"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "/store",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a260278-83ff-4681-81f1-d4a0cb828745",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"tests[\"Store 'test_store' is returned\"] = jsonData.stores[0].name === 'test_store';",
									"tests[\"Store id of 'test_store' is returned\"] = jsonData.stores[0].id === parseInt(environment.store_id);",
									"",
									"tests[\"Item 'test_item' is returned inside 'test_store'\"] = jsonData.stores[0].items[0].name === 'test_item';",
									"tests[\"Item 'test_item' price is returned inside 'test_store'\"] = jsonData.stores[0].items[0].price === 17.99;",
									"",
									"tests[\"Response time is less than 200ms\"] = responseTime < 200;",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === 'application/json';"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "JWT {{access_token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/stores",
							"host": [
								"{{url}}"
							],
							"path": [
								"stores"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "/item/my_item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "398a6344-b186-4be5-8de9-c02fd1005bc0",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"tests[\"Message is returned\"] = jsonData.message === 'Item deleted';",
									"tests[\"Successful DELETE request\"] = responseCode.code === 200;",
									"tests[\"Response time is less than 200ms\"] = responseTime < 200;",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === 'application/json';"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{access_token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/item/test_item",
							"host": [
								"{{url}}"
							],
							"path": [
								"item",
								"test_item"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "/store/test_store",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f6402b17-90fa-4ed3-83df-93d094cbaca2",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"tests[\"Store name is returned\"] = jsonData.message === 'Store deleted';",
									"tests[\"Successful POST request\"] = responseCode.code === 200;",
									"tests[\"Response time is less than 200ms\"] = responseTime < 200;",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === 'application/json';"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "JWT {{access_token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/store/test_store",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"test_store"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "/item/my_item",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "JWT {{access_token}}"
					}
				],
				"body": {},
				"url": {
					"raw": "{{url}}/item/my_item",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						"my_item"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "/auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "59004536-2f3e-485b-b8fe-0389fcbf8fb0",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.environment.set(\"access_token\", jsonData.access_token);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"tests[\"Body contains access_token\"] = responseBody.has(\"access_token\");",
							"",
							"",
							"",
							"pm.test(\"Response time is less than 150ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(150);",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "JWT"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\": \"user3\",\n\t\"password\": \"abcxyz\"\n}"
				},
				"url": {
					"raw": "{{url}}/auth",
					"host": [
						"{{url}}"
					],
					"path": [
						"auth"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "/register",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d5f82f65-39f6-46dd-ad9c-cdd04c5d8abc",
						"type": "text/javascript",
						"exec": [
							"pm.environment.unset(\"access_token\");",
							"",
							"tests[\"Response time is less than 200ms\"] = responseTime < 200;",
							"",
							"//can be made as this too",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"tests[\"User created successfully\"] = jsonData.message === 'User created successfully.';",
							"",
							"pm.test(\"User created successfully\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"User created successfully\");",
							"});",
							"",
							"tests[\"Content-Type is present in response\"] = postman.getResponseHeader('Content-Type');",
							"tests[\"Content-Type is 'application/json'\"] = postman.getResponseHeader('Content-Type') === 'application/json';"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "JWT"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\": \"user14\",\n\t\"password\": \"abcxyz\"\n}"
				},
				"url": {
					"raw": "{{url}}/register",
					"host": [
						"{{url}}"
					],
					"path": [
						"register"
					]
				},
				"description": ""
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "87550ed8-1de4-4e5d-be84-e0038bddeccc",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "68a226e9-e185-468d-9153-bd0d86831f63",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}